[
  {
    "filepath": "/Users/benson/Local/cs486-686/inclass/week06/llama-index/xv6-riscv/kernel/proc.c",
    "filename": "proc.c",
    "relpath": "kernel/proc.c",
    "start_line": 200,
    "end_line": 226,
    "length": 27,
    "content": "int\nfork(void)\n{\n    int i, pid;\n    struct proc *np;\n    // Allocate process.\n    if((np = allocproc()) == 0)\n        return -1;\n    // Copy process state from parent.\n    if(copyuvm(curproc->pagetable, np->pagetable, curproc->sz) < 0) {\n        freeproc(np);\n        return -1;\n    }\n    np->sz = curproc->sz;\n    np->parent = curproc;\n    *(np->trapframe) = *(curproc->trapframe);\n    np->trapframe->a0 = 0;\n    for(i = 0; i < NOFILE; i++){\n        if(curproc->ofile[i])\n            np->ofile[i] = filedup(curproc->ofile[i]);\n    }\n    np->cwd = idup(curproc->cwd);\n    safestrcpy(np->name, curproc->name, sizeof(curproc->name));\n    pid = np->pid;\n    np->state = RUNNABLE;\n    return pid;\n}"
  },
  {
    "filepath": "/Users/benson/Local/cs486-686/inclass/week06/llama-index/xv6-riscv/kernel/sysproc.c",
    "filename": "sysproc.c",
    "relpath": "kernel/sysproc.c",
    "start_line": 30,
    "end_line": 34,
    "length": 5,
    "content": "uint64\nsys_fork(void)\n{\n    return fork();\n}"
  },
  {
    "filepath": "/Users/benson/Local/cs486-686/inclass/week06/llama-index/xv6-riscv/kernel/proc.c",
    "filename": "proc.c",
    "relpath": "kernel/proc.c",
    "start_line": 75,
    "end_line": 94,
    "length": 20,
    "content": "static struct proc*\nallocproc(void)\n{\n    struct proc *p;\n\n    for(p = proc; p < &proc[NPROC]; p++){\n        if(p->state == UNUSED){\n            p->state = USED;\n            p->pid = nextpid++;\n            // Allocate a trapframe page.\n            if((p->trapframe = (struct trapframe *)kalloc()) == 0){\n                p->state = UNUSED;\n                return 0;\n            }\n            memset(p->trapframe, 0, PGSIZE);\n            return p;\n        }\n    }\n    return 0;\n}"
  }
]